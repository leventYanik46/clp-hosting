---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <!-- Background slot container -->
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <!-- Main image container -->
  <div class="h-[76px] w-full hidden md:block"></div>
  <div class="relative w-full h-[50vh] md:h-[80vh]">
    <div class="absolute inset-0">
      <!-- Image container -->
      {
        image && (
          <div class="relative w-full h-full">
            {typeof image === 'string' ? (
              <Fragment set:html={image} />
            ) : (
              <Image
                class="w-full h-full object-cover"
                widths={[360, 640, 768, 1024, 1280, 1920, 2400, 3200]}
                sizes="(min-width: 3200px) 3200px, (min-width: 2400px) 2400px, (min-width: 1920px) 1920px, (min-width: 1280px) 1280px, (min-width: 1024px) 1024px, (min-width: 768px) 768px, (min-width: 640px) 640px, 360px"
                loading="eager"
                width={3200}
                height={1080}
                {...image}
              />
            )}
          </div>
        )
      }
    </div>
  </div>

  <!-- Actions section - immediately below image -->
  {
    actions && (
      <div class="relative py-5 md:py12 bg-white\ -mt-[2rem] md:-mt-[3rem]">
        <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-2 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
          {Array.isArray(actions) ? (
            actions.map((action) => (
              <div class="flex w-full sm:w-auto whitespace-nowrap">
                <Button {...(action || {})}/>
              </div>
            ))
          ) : (
            <Fragment set:html={actions} />
          )}
          
        </div>
      </div>
    )
  }

  <!-- Content section - below actions -->
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="py-10 md:py-20">
      <div class="text-center max-w-5xl mx-auto">
        {
          tagline && (
            <p
              class="text-sm md:text-base text-secondary font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="text-4xl sm:text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {
            subtitle && (
              <p
                class="text-lg sm:text-xl text-muted mb-2 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
                set:html={subtitle}
              />
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
