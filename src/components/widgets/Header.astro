---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import Button from '~/components/ui/Button.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isFullWidth?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isFullWidth = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 lg:px-6 mx-auto w-full border-t border-gray-200',
      {
        'lg:flex lg:justify-between': position !== 'center',
      },
      {
        'lg:grid lg:grid-cols-3 lg:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center " href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center gap-4 lg:hidden">
        {/* New mobile-only Contact Us button before ToggleMenu, visible on screens smaller than lg */}
        <div class="lg:hidden">
          {actions?.[0] && (
            <Button {...actions[0]} class="py-2.5 px-2.5 ml-2 font-semibold shadow-none text-sm whitespace-nowrap" />
          )}
        </div>
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center w-full lg:w-auto hidden lg:flex lg:ml-48 lg:-mr-4 -text-default overflow-y-auto overflow-x-hidden lg:overflow-y-visible lg:overflow-x-auto lg:justify-self-center"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col lg:flex-row lg:self-center w-full lg:w-auto max-[1080px]:text-[0.85rem] min-[1080px]:text-[1rem] tracking-[0.01rem] font-medium lg:justify-center"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button type="button" class="hover:text-link px-4 py-3 flex items-center whitespace-nowrap">
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden lg:inline" />
                  </button>
                  <ul class="dropdown-menu lg:backdrop-blur-md rounded lg:absolute pl-4 lg:pl-0 lg:hidden font-medium lg:bg-white/90 lg:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b lg:hover:bg-gray-100 hover:text-link py-2 px-5 block whitespace-no-wrap',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link px-4 py-3 flex items-center whitespace-nowrap',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden lg:self-center lg:flex items-center lg:mb-0 fixed w-full lg:w-auto lg:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 lg:p-0 lg:justify-self-end',
      ]}
    >
      {
        actions?.length ? (
          <span class="-ml-32 rtl:-ml-0 rtl:-mr-32">
            {actions.map((btnProps) => (
              <Button {...btnProps} class="py-2.5 px-5.5 lg:px-6 font-semibold shadow-none text-sm w-auto" />
            ))}
          </span>
        ) : (
          ''
        )
      }
    </div>
  </div>
</header>
<div class="border-t-2 border-gray-100"></div>
